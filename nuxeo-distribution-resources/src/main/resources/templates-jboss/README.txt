-----
About
-----

The templates in this directory are used to generate configuration and datasource
files at server startup when it is not already configured.

1) Usage

1.1) General instructions

Edit nuxeo.conf and set the name of the template to use (default template is "default").

Set the properties you want to customize, see nuxeo.defaults files for available parameters.
For example, recommended changes are:
  nuxeo.template=default
  nuxeo.bind.address=0.0.0.0
And, for example, if you use a database template:
  nuxeo.db.host=localhost
  nuxeo.db.name=nuxeo
  nuxeo.db.user=user
  nuxeo.db.password=password

Default values are used for undefined properties in nuxeo.conf
Take care that the following sample is defining an empty property:
  nuxeo.sample.value=

*DO NOT EDIT* nuxeo.defaults files except, if needed, the one in custom template.

1.2) Technical overview

A server is considered as already configured when it has a config directory.
When the config directory doesn't exist, templates will be used to generate all 
configuration files (config and datasources).

The template files contain parameters defined such as ${sample.parameter}
Values for parameters replacement are calculated by this way:
  * If nuxeo.conf does not define nuxeo.template, then nuxeo.template equals "default".
  * The ${nuxeo.template} value is used for determining the chosen template.
  * The file templates/${nuxeo.template}/nuxeo.defaults is read for default values.
  * The file templates/nuxeo.defaults is read for default values not already defined 
    by the previous one
  * The file nuxeo.conf is read for custom values (overwriting default values).
  
Configuration files are then generated by this way:
  * For each comma separated value of nuxeo.template.includes (let say nuxeo.template.include), 
    files in templates/${nuxeo.template.include}/ are copied (using the previously 
    calculated values for replacing parameters).
  * Files in templates/${nuxeo.template}/ are copied (with parameters replacement).

1.3) Customization

"custom" template allows to add customization such as using multiple databases, 
configuring services, ...

  * Add your own template files in "templates/custom" directory.
    You can use either existing or new parameters in these new template files
  * Edit nuxeo.conf, set your parameters' values and set nuxeo.template=custom
  * Edit custom/nuxeo.defaults and set nuxeo.template.includes parameter to define 
    the list of existing templates to include (comma separated values); your custom 
    template will be used at last.
    Note nuxeo.defaults files from included templates won't be read. 

In case you need multiple customization, create multiple directories and reference
them in nuxeo.conf of each server.

2) Available templates

2.1) default

Default Nuxeo configuration.
Designed for development or test purpose.
Repository backend: H2
Tags service backend: H2
Other services backend: Derby

2.2) postgresql

Recommended configuration for production, based on PostgreSQL.
Think to add PostgreSQL JDBC driver into server/default/lib/ directory.
Repository backend: PostgreSQL XA
Tags service backend: PostgreSQL XA
Other services backend: PostgreSQL XA

2.3) mysql

Repository backend: MySQL XA
Tags service backend: MySQL
Other services backend: MySQL

2.4) oracle

Repository backend: Oracle XA
Tags service backend: Oracle
Other services backend: Oracle

2.5) stateful and stateless

Configuration separating stateful and stateless services (see Nuxeo documentation 
for details) using default values for database.

