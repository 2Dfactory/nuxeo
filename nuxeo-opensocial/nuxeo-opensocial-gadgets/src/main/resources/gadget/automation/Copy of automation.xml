<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="Nuxeo Automation"
    description="Simple gadget that uses Nuxeo REST Automation API "
    author="tdeprat" author_email="tdelprat@nuxeo.com"
    height="420">
    <Locale lang="fr" country="fr" />
    <Require feature="dynamic-height" />
    <#include "default-oauth-prefs.ftl"/>
  </ModulePrefs>
  <Content type="html">

<![CDATA[
<html>
  <head>
  <link rel="stylesheet" type="text/css" href="${specDirectoryUrl}documentlists.css"/>
  <script>
    var NXGadgetContext={ serverSideBaseUrl : '${serverSideBaseUrl}',
      insideNuxeo : '${insideNuxeo}'
    };
    var NXRequestParams={ operationId : 'Document.Query',

    };
  </script>
  <script>
      function showErrorMessage(message) {
        _gel("errorMessage").innerHTML=message;
        _gel("errorMessage").style.display='block';
      }
      function hideErrorMessage(message) {
        _gel("errorMessage").innerHTML="";
        _gel("errorMessage").style.display='none';
      }
      function showWaitMessage() {
        _gel("waitMessage").style.display='block';
      }
      function hideWaitMessage() {
        _gel("waitMessage").style.display='none';
      }
      function showOAuthPrompt(openCallback, doneCallback) {
        _gel("oAuthPromptMessage").style.display='block';
        _gel('nxauth').onclick = openCallback;
        _gel('approvaldone').onclick = doneCallback;
      }
      function showOAuthInProgress() {
        _gel("oAuthWaitMessage").style.display='block';
      }
      function hideOAuthInProgress() {
        _gel("oAuthWaitMessage").style.display='none';
      }


      function doRequest(nxParams) {

        showWaitMessage();
        hideErrorMessage();

        var ts = new Date().getTime() + "" + Math.random()*11
        var url = NXGadgetContext.serverSideBaseUrl + "site/automation/" + nxParams.operationId;
        url += "?ts=" + ts;

        var rParams = {};
        if (NXGadgetContext.insideNuxeo) {
          rParams[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
          rParams[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = "nuxeo4shindig";
        } else {
          rParams[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.OAUTH;
          rParams[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = "nuxeo";
          rParams[gadgets.io.RequestParameters.OAUTH_USE_TOKEN]="always";
        }
        rParams[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;

        rParams[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;

        // Automation params
        var params = {};
        params.query="Select * from Document";
        // Automation input
        var input;
        // Automation context
        var context = {};
        // Automation document properties
        var documentProperties = "common, dublincore";

        // Build automation body
        var automationParams = {};
        automationParams.input=input;
        automationParams.params=params;
        automationParams.context=context;
        automationParams.documentProperties=documentProperties;

        rParams[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues({jsondata : JSON.stringify(automationParams)});

        gadgets.io.makeRequest(url, requestCompleted, rParams);
    }

    function requestCompleted(response) {
      if (response.data) {
        hideWaitMessage();
        hideOAuthInProgress();
        if (response.data['entity-type']=='documents') {
          displayDocumentList(response.data.entries);
        }
        else {
          alert(response.data.entity-type);
        }
      } else if (response.oauthApprovalUrl) {
            var onOpen = function() {
              showOAuthInProgress();
            };

            var onClose = function() {
              doRequest();
            };
            var popup = new gadgets.oauth.Popup(response.oauthApprovalUrl,
                'height=600,width=800', onOpen, onClose);
            showOAuthPrompt(popup.createOpenerOnClick(), popup.createApprovedOnClick());
      }
      else {
        showErrorMessage("No data received from server");
      }
    }

  </script>
  <script>
    var prefs = new _IG_Prefs(__MODULE_ID__);
    var currentPage = 0;
    var maxPage=0;
    var errors=0;


    function $(x) {
        return document.getElementById(x);
    }

    function getImageBaseUrl() {
      return "${baseUrl}";
    }

  // insert the whole table, as stupid IE can't do a tbody.innerHtml
  function tableStart(jsonObject) {
      var title = "Document";
      var modified = "Modified";
      var creator = "Author";
      var labelInfo = jsonObject.translations;
      if (labelInfo != null && labelInfo != 'undefined') {
          title = labelInfo['label.dublincore.title'];
          modified = labelInfo['label.dublincore.modified'];
          creator = labelInfo['label.dublincore.creator'];
      }
      var html = "";
      html += "<table class='dataList'>";
      html += "  <thead>";
      html += "    <tr>";
      html += "      <th/>";
      html += "      <th>" + title + "</th>";
      html += "      <th/>";
      html += "      <th>" + modified + "</th>";
      html += "      <th>" + creator + "</th>";
      html += "      <th/>";
      html += "    </tr>";
      html += "  </thead>";
      html += "  <tbody>";
      return html;
  }

  function tableEnd() {
      var html = "";
      html += "  </tbody>";
      html += "</table>";
      return html
  }

  function displayDocumentList(entries) {

      var htmlContent = tableStart(entries);
      for (var i=0; i< entries.length; i++) {
          htmlContent+=mkRow(entries[i], i);
      }
      htmlContent += tableEnd();
      _gel("nxDocumentListData").innerHTML = htmlContent + "<br/>";

      // page info
      //var pageInfo = jsonObject.summary;
      //var pageInfoLabel = pageInfo.pageNumber+1;
      //pageInfoLabel+= "/";
      //pageInfoLabel+= pageInfo.pages;
      //maxPage = pageInfo.pages;
      //_gel("nxDocumentListPage").innerHTML = pageInfoLabel;

      gadgets.window.adjustHeight();
  }

  function getBaseUrl() {
     return "${baseUrl}";
  }

  function getDateForDisplay(datestr) {
      try {
          var d = new Date(datestr);
          var result = d.toLocaleDateString() + " " + d.toLocaleTimeString().substring(0,5);
          return result;
      }
      catch(e) {
          return datestr;
      }
  }

  function mkRow(dashBoardItem, i) {
      var htmlRow = "<tr class=\"";
      if (i%2==0){
      htmlRow+="dataRowEven";
      } else {
      htmlRow+="dataRowOdd";
      }
      htmlRow+="\">";
      htmlRow+="<td class=\"iconColumn\">"
      htmlRow+="<img alt=\"File\" src=\""
      htmlRow+=getImageBaseUrl();
      htmlRow+=dashBoardItem.properties["common:icon"];
      htmlRow+="\"/>";
      htmlRow+="</td><td><a target = \"_top\" title=\"";
      htmlRow+=dashBoardItem.title;
      htmlRow+="\" href=\"";
      htmlRow+=getBaseUrl();
      htmlRow+="nxpath/default";
      htmlRow+=dashBoardItem.path;
      htmlRow+="@view_documents";
      htmlRow+="\" />";
      htmlRow+=dashBoardItem.title;
      htmlRow+="</a></td><td class=\"iconColumn\"/>";
      htmlRow+="<td>";
      htmlRow+=getDateForDisplay(dashBoardItem.lastModified);
      htmlRow+="</td>";
      htmlRow+="<td>";
      htmlRow+=dashBoardItem.properties["dc:creator"];
      htmlRow+="</td>";
      htmlRow+="<td class=\"iconColumn\"/>";
      htmlRow+="</tr>";
      return htmlRow;
    }

  function nextPage() {
      if (currentPage < maxPage-1) {
          currentPage+=1;
      }
      refresh();
  }

  function prevPage() {
      if (currentPage > 0) {
          currentPage=currentPage-1;
      }
      refresh();
  }

  function firstPage() {
      currentPage=0;
      refresh();
  }

  function lastPage() {
      currentPage=maxPage-1;
      if (currentPage < 0) {
          currentPage=0;
      }
      refresh();
  }

  function refresh() {
     doRequest();
  }

  gadgets.util.registerOnLoadHandler(doRequest);

  </script>
  </head>
   <body>

   <#include "default-documentlist-layout.ftl"/>

   <#include "default-request-controls.ftl"/>

  </body>
</html>
]]>
  </Content>
</Module>
